[{"/home/eagle7/lozpdata/BigCommerce-project/React_DashBoard/src/components/summary.jsx":"1","/home/eagle7/lozpdata/BigCommerce-project/React_DashBoard/src/components/layout.jsx":"2","/home/eagle7/lozpdata/BigCommerce-project/React_DashBoard/src/reportWebVitals.js":"3","/home/eagle7/lozpdata/BigCommerce-project/React_DashBoard/src/components/loader.jsx":"4","/home/eagle7/lozpdata/BigCommerce-project/React_DashBoard/src/components/orderList.jsx":"5","/home/eagle7/lozpdata/BigCommerce-project/React_DashBoard/src/App.js":"6","/home/eagle7/lozpdata/BigCommerce-project/React_DashBoard/src/index.js":"7"},{"size":1983,"mtime":1606492461649,"results":"8","hashOfConfig":"9"},{"size":694,"mtime":1608650386482,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1606333583301,"results":"11","hashOfConfig":"9"},{"size":167,"mtime":1609354820153,"results":"12","hashOfConfig":"9"},{"size":5975,"mtime":1608989129175,"results":"13","hashOfConfig":"9"},{"size":206,"mtime":1609354659069,"results":"14","hashOfConfig":"9"},{"size":500,"mtime":1606333583301,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"kho56j",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/eagle7/lozpdata/BigCommerce-project/React_DashBoard/src/components/summary.jsx",[],"/home/eagle7/lozpdata/BigCommerce-project/React_DashBoard/src/components/layout.jsx",[],"/home/eagle7/lozpdata/BigCommerce-project/React_DashBoard/src/reportWebVitals.js",[],"/home/eagle7/lozpdata/BigCommerce-project/React_DashBoard/src/components/loader.jsx",[],"/home/eagle7/lozpdata/BigCommerce-project/React_DashBoard/src/components/orderList.jsx",["31","32","33"],"import { Button, Table, Panel, Modal , Text, createAlertsManager , AlertsManager, Badge } from \"@bigcommerce/big-design\";\nimport { useState, useEffect } from \"react\";\nimport Loader from \"./loader\";\n\nconst alertsManager = createAlertsManager()\n\nfunction getList() {\n    return fetch(`/bc-api/v2/orders`)\n    .then(data => data.json())\n} \n\nfunction orderUpdate(orderId){\n  return fetch(`/bc-api/v2/orders/${orderId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ status_id: 5 }),\n  })\n}\n\nfunction orderDelete(orderId){\n  return fetch(`/bc-api/v2/orders/${orderId}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  })\n}\n\n\nfunction AddAlert(title, details, type) {\n  const alert = {\n    header: title,\n    messages: [\n      {\n        text: details,\n      },\n    ],\n    type: type,\n    onClose: () => null,\n    autoDismiss: true\n  }\n  return(alertsManager.add(alert))\n}\n\n\n\n\nfunction orderStatus(status, is_deleted){\n  if(is_deleted){\n    return(\n    <div></div>\n    )\n  }else{\n    switch(status) {\n      case 'Completed':\n        return (<Badge variant=\"success\" label={status}/>)\n        break;\n      case 'Awaiting Fulfillment':\n        return (<Badge variant=\"secondary\" label={status}/>)\n        break;\n      case 'Cancelled':\n        return (<Badge variant=\"danger\" label={status}/>)\n        break;\n      default:\n        return (<Badge variant=\"secondary\" label={status}/>)\n    }\n  }\n}\n\n\nfunction OrderList() {\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPageOptions] = useState([5, 10, 20, 30]);\n  const [itemsPerPage, setItemsPerPage] = useState(5);\n  const [currentItems, setCurrentItems] = useState([]);\n  const [loading, setLoading] = useState(true)\n  const [data, setList] = useState([]);\n\n\n  function DeleteAlert(){\n    AddAlert('Order Delete', 'Order Has Been Deleted Successfully!', 'success')\n  }\n  function UpdateAlert(){\n    AddAlert('Order Update', 'Order Has Been Cancelled Successfully!', 'success')\n  }\n\n\n  function DeleteButton(id ,is_deleted) {\n    const [isOpen, setIsOpen] = useState(false);\n\n    if(!is_deleted){\n      return (\n        // <Button variant=\"subtle\" actionType=\"destructive\" onClick={() => orderUpdate(id).then(setLoading(true))} >Cancel</Button>\n      <>\n        <Button onClick={() => setIsOpen(true)} variant=\"subtle\" actionType=\"destructive\">Delete Order</Button>\n\n        <Modal\n          actions={[\n            { text: 'Cancel', variant: 'subtle', onClick: () => setIsOpen(false) },\n            { text: 'Delete', onClick: () =>  orderDelete(id).then(setIsOpen(false)).then(setLoading(true)).then(DeleteAlert())},\n          ]}\n          header=\"Warning\"\n          isOpen={isOpen}\n          onClose={() => setIsOpen(false)}\n          closeOnEscKey={true}\n          closeOnClickOutside={false}\n          variant=\"dialog\"\n        >\n          <Text>\n          Do you really want to delete order with id #{id} ?\n          </Text>\n        </Modal>\n      </>\n      )\n    }\n    else{\n      return <div>Order Deleted</div>\n    }\n  }\n\n  \n  function UpdateButton(id ,status , is_deleted){\n    const [isOpen, setIsOpen] = useState(false);\n\n    if(status === 'Cancelled' || status === 'Completed' || is_deleted){\n      return(\n        <div></div>\n      )\n    }else{\n      return(\n        <>\n          {/* <Button actionType=\"destructive\" onClick={() => orderUpdate(id).then(setLoading(true))} >Cancel</Button> */}\n          <Button onClick={() => setIsOpen(true)} actionType=\"destructive\">Cancel</Button>\n\n          <Modal\n            actions={[\n              { text: 'Cancel', variant: 'subtle', onClick: () => setIsOpen(false) },\n              { text: 'Delete', onClick: () =>  orderUpdate(id).then(setIsOpen(false)).then(setLoading(true)).then(UpdateAlert())},\n            ]}\n            header=\"Warning\"\n            isOpen={isOpen}\n            onClose={() => setIsOpen(false)}\n            closeOnEscKey={true}\n            closeOnClickOutside={false}\n            variant=\"dialog\"\n          >\n            <Text>\n            Are you sure you want to Cancel this order?\n            </Text>\n          </Modal>\n        </>\n      )\n    }\n  }\n\n  const columns=[\n      { header: 'Order Id', hash: 'id', render: ({ id }) => id },\n      { header: 'Billing Name', hash: 'billing_address', render: ({ billing_address }) =>`${ billing_address.first_name} ${billing_address.last_name}` },\n      { header: 'Order Total', hash: 'total_tax', render: ({ total_tax }) => total_tax },\n      { header: 'Order Status', hash: 'custom_status', render: ({ status, is_deleted}) => orderStatus(status, is_deleted) },\n      { header: '', hash: 'stock', render: ({ id ,status, is_deleted}) => UpdateButton(id ,status, is_deleted)},\n      { header: '', hash: 'stockmm', render: ({ id , is_deleted}) => DeleteButton(id , is_deleted)  },\n    ]\n\n        \n\n  const onItemsPerPageChange = (newRange) => {\n    setCurrentPage(1);\n    setItemsPerPage(newRange);\n  };\n\n\n  useEffect(() => {\n  getList().then(items => {\n      setList(items);\n      const maxItems = currentPage * itemsPerPage;\n      const lastItem = Math.min(maxItems, items.length);\n      const firstItem = Math.max(0, maxItems - itemsPerPage);\n      setCurrentItems(items.slice(firstItem, lastItem));\n  }).then(() => setLoading(false))\n  }, [currentPage, itemsPerPage, loading]);\n\n  return (\n    <>\n    <AlertsManager manager={alertsManager} />\n    {\n      loading ? <Loader />\n        :\n      <Panel header=\"Orders \">\n        <Table\n          keyField=\"sku\"\n          columns={columns}\n          items={currentItems}\n          itemName=\"Orders\"\n          pagination={{\n            currentPage,\n            totalItems: data.length,\n            onPageChange: setCurrentPage,\n            itemsPerPageOptions,\n            onItemsPerPageChange,\n            itemsPerPage,\n          }}\n          stickyHeader\n        />\n      </Panel>\n    }\n  </>\n  \n  );}\n  \n\n  export default OrderList;","/home/eagle7/lozpdata/BigCommerce-project/React_DashBoard/src/App.js",[],"/home/eagle7/lozpdata/BigCommerce-project/React_DashBoard/src/index.js",[],{"ruleId":"34","severity":1,"message":"35","line":59,"column":9,"nodeType":"36","messageId":"37","endLine":59,"endColumn":15},{"ruleId":"34","severity":1,"message":"35","line":62,"column":9,"nodeType":"36","messageId":"37","endLine":62,"endColumn":15},{"ruleId":"34","severity":1,"message":"35","line":65,"column":9,"nodeType":"36","messageId":"37","endLine":65,"endColumn":15},"no-unreachable","Unreachable code.","BreakStatement","unreachableCode"]